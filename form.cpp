//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\putilov_aa\source\repos\Dimension\Dimension\form.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: putilov_aa
//              Version: NX 10
//              Date: 01-10-2024  (Format: mm-dd-yyyy)
//              Time: 06:29 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "form.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(form::theSession) = NULL;
UI *(form::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
form::form()
{
    try
    {
        // Initialize the NX Open C++ API environment
        form::theSession = NXOpen::Session::GetSession();
        form::theUI = UI::GetUI();
        theDlxFileName = "C:\\Users\\putilov_aa\\source\\repos\\Dimension\\Dimension\\form.dlx";
        theDialog = form::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &form::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &form::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &form::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &form::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &form::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
form::~form()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    form *theform = NULL;
    try
    {
        theform = new form();
        static unsigned char* c;
        c = { nxauthblock };
        // The following method shows the dialog immediately
        theform->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theform != NULL)
    {
        delete theform;
        theform = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int form::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void form::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        selection0 = dynamic_cast<NXOpen::BlockStyler::SelectObject*>(theDialog->TopBlock()->FindBlock("selection0"));
        string0 = dynamic_cast<NXOpen::BlockStyler::StringBlock*>(theDialog->TopBlock()->FindBlock("string0"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void form::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int form::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int form::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == selection0)
        {
        //---------Enter your code here-----------
            UF_UI_open_listing_window();

            std::vector<NXOpen::TaggedObject*> getSelectedObjects = selection0->GetSelectedObjects();

            for (int i = 0; i < getSelectedObjects.size(); ++i)
            {
                UF_UI_write_listing_window(std::to_string(getSelectedObjects[i]->Tag()).c_str());
            
                double origin[3];
                UF_DRF_ask_origin(getSelectedObjects[i]->Tag(), origin);

                tag_t tag_line, tag_note = NULL_TAG;
                const int number_of_objects = 2;
                tag_t arr_tag[number_of_objects];
                char* text_string[1] = { const_cast<char*>("(<$t>9)")};
                int orientationt = 0;

                //Создание линий и символов
                //UF_CURVE_create_line(&line_coords, &tag_line);//линия
                UF_DRF_create_note(1, text_string, origin, orientationt, &tag_note);//текст

                //Добавление линий и символов к стрелке
                //arr_tag[0] = tag_line;
                arr_tag[0] = tag_note;
                UF_DRF_add_assortpart_to_ann(getSelectedObjects[i]->Tag(), number_of_objects, arr_tag);




                NXOpen::Session* theSession = NXOpen::Session::GetSession();
                NXOpen::Part* workPart(theSession->Parts()->Work());
                NXOpen::Part* displayPart(theSession->Parts()->Display());
                //NXOpen::Session::UndoMarkId markId1;
               // markId1 = theSession->SetUndoMark(NXOpen::Session::MarkVisibilityVisible, "Edit Object Origin");

                NXOpen::Annotations::Note* note1(dynamic_cast<NXOpen::Annotations::Note*>(NXOpen::NXObjectManager::Get(tag_note)));
                note1->SetLeaderOrientation(NXOpen::Annotations::LeaderOrientationFromLeft);

                NXOpen::Annotations::Dimension* dim(dynamic_cast<NXOpen::Annotations::Dimension*>(NXOpen::NXObjectManager::Get(getSelectedObjects[i]->Tag())));
                note1->InsertIntoStack(dim, NXOpen::Annotations::StackAlignmentPositionRight);
                //NXOpen::Annotations::VerticalDimension* verticalDimension1(dynamic_cast<NXOpen::Annotations::VerticalDimension*>(NXOpen::NXObjectManager::Get(getSelectedObjects[i]->Tag())));
                //note1->InsertIntoStack(verticalDimension1, NXOpen::Annotations::StackAlignmentPositionRight);

                //NXOpen::Annotations::ParallelDimension* parallelDimension1(dynamic_cast<NXOpen::Annotations::ParallelDimension*>(NXOpen::NXObjectManager::Get(getSelectedObjects[i]->Tag())));
                //note1->InsertIntoStack(parallelDimension1, NXOpen::Annotations::StackAlignmentPositionRight);

                //NXOpen::Annotations::HorizontalDimension* horizontalDimension1(dynamic_cast<NXOpen::Annotations::HorizontalDimension*>(NXOpen::NXObjectManager::Get(getSelectedObjects[i]->Tag())));
                //note1->InsertIntoStack(horizontalDimension1, NXOpen::Annotations::StackAlignmentPositionRight);

                //int nErrs1;
                //nErrs1 = theSession->UpdateManager()->DoUpdate(markId1);
            }
        }
        else if(block == string0)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int form::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        form::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* form::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
